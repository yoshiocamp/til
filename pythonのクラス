three = 3

numbers = [2,5,7,3,1]

mylambda = lambda x: x if x % 2 ==0 else "2で割り切れません"

print(type(three))
print(type(numbers))
print(type(mylambda))


<class 'int'>
<class 'list'>
<class 'function'>

help（）関数を使うと

help(numbers)


Help on list object:     #objectは数値や文字列・リストやタプルなどのデータ型を抽象化した概念

class list(object)
 |  list(iterable=(), /)
 |  
 |  Built-in mutable sequence.
 |  
 |  If no argument is given, the constructor creates a new empty list.
 |  The argument must be an iterable if specified.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __delitem__(self, key, /)
 |      Delete self[key].
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(...)
 |      x.__getitem__(y) <==> x[y]
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __iadd__(self, value, /)
 |      Implement self+=value.
 |  
 |  __imul__(self, value, /)
 |      Implement self*=value.
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __reversed__(self, /)
 |      Return a reverse iterator over the list.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __setitem__(self, key, value, /)
 |      Set self[key] to value.
 |  
 |  __sizeof__(self, /)
 |      Return the size of the list in memory, in bytes.
 |  
 |  append(self, object, /)　　　#メソッドとして入っているため使える
 |      Append object to the end of the list.
 |  
 |  clear(self, /)
 |      Remove all items from list.
 |  
 |  copy(self, /)
 |      Return a shallow copy of the list.
 |  
 |  count(self, value, /)
 |      Return number of occurrences of value.
 |  
 |  extend(self, iterable, /)　　　　#メソッドとして入っているため使える
 |      Extend list by appending elements from the iterable.
 |  
 |  index(self, value, start=0, stop=9223372036854775807, /)
 |      Return first index of value.
 |      
 |      Raises ValueError if the value is not present.
 |  
 |  insert(self, index, object, /)
 |      Insert object before index.
 |  
 |  pop(self, index=-1, /)
 |      Remove and return item at index (default last).
 |      
 |      Raises IndexError if list is empty or index is out of range.
 |  
 |  remove(self, value, /)
 |      Remove first occurrence of value.
 |      
 |      Raises ValueError if the value is not present.
 |  
 |  reverse(self, /)
 |      Reverse *IN PLACE*.
 |  
 |  sort(self, /, *, key=None, reverse=False)
 |      Sort the list in ascending order and return None.
 |      
 |      The sort is in-place (i.e. the list itself is modified) and stable (i.e. the
 |      order of two equal elements is maintained).
 |      
 |      If a key function is given, apply it once to each list item and sort them,
 |      ascending or descending, according to their function values.
 |      
 |      The reverse flag can be set to sort in descending order.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  __class_getitem__(...) from builtins.type
 |      See PEP 585
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __hash__ = None


  クラスの定義
   classでクラスの定義を宣言
  クラス名　そのあと(object):を付ける
改行してインデントの後ろにクラスの中身を作る

class Student(object):
    pass              #passは何もしないことを表す

上記だけでクラスが出来ている
がこのままでは何もメソッドがないため不便。上記のリストではメソッドが入っているためextendやappendが使えた。

メソッドを追加する
class Student(object):
    def say_hello(self):　#def 関数名(self)    カッコ内にselfを入れる
        print("say hello")

クラスの使い方
STEP1⃣　変数 = クラス名()でオブジェクトを作成する
STEP2⃣　変数.メソッド名()でメソッドを利用する


class Student(object):
    def say_hello(self):
        print("say hello")

# STEP1 変数 = クラス名()
Student = Student()

# STEP2　変数.メソッド名()
Student.say_hello()


say hello

空のリストを作って１を追加する

# STEP1 変数 = クラス名()
l = list()

# STEP2　変数.メソッド名()
l.append(1)

print(l)


[1]

流れは全く一緒



引数を使えるようにする
例えば引数の数だけHelloを繰り返すメソッドにするなら
引数にtimesを入れて

class Student(object):
    def say_hello(self,times):
        print("Hello" * times)

# STEP1 変数 = クラス名()
Student = Student()

# STEP2　変数.メソッド名()
Student.say_hello(3)    #引数に数値を入れる


HelloHelloHello　　　　　　　　#数値の分だけ繰り返されている



Student = Student()
変数    =  クラス名
クラスから生成されたオブジェクト
→インスタンスと言う
Student.say_hello()で呼び出していたメソッドを
→インスタンスメソッドと言う




