続き
データの加工・前処理
今のデータのままだと機械学習モデルが作れない

今回の場合
乗客の年齢（Age）,出発した港（Enbarked）に欠損値が存在している
そのようなデータを保管していく

・特徴量エンジニアリング
新しいカラムを作る
例えば性別とチケットのクラスを使って予測する場合この2つが特徴量ということになる
そして新しい特徴量を作ることを特徴量エンジニアリングという
#今回は使わない

使わないデータを削除する　#特徴量のカラム以外を削除
データフレームから特定のカラムを削除する
df.drop()を使う
削除したいカラムをリストで指定してdf2の中に入れておく

df2 = df.drop(columns=
              ["Cabin", "Fare", "Ticket", "SibSp", "Parch", "Name"])

データの確認
df2.head()

#余計なカラムが消えているのが分かる


欠損値の補完

欠損個所の確認
df2.isnull().sum()　#実行


	0
PassengerId	0
Survived	418
Pclass	0
Sex	0
Age	263
Embarked	2


Survivedがかけているのはテストデータの分のため置いておく
欠損値になっていたのはAgeとEmbarked	

今回は１３０９件のデータしかない（少ないデータ量）ため削除は行わない
まずは出発した港（Enbarked）を補完
任意のカラムの欠損値の数のみをカウントするにはどうするか
df2["カウントしたいカラム"].isnull().sum()
見やすいように文字列も入れて
print("欠損値の数:", df2["Embarked"].isnull().sum())  #実行

欠損値の数: 2

#欠損値のカウントにかかわらずPandasで特定のカラムを対象に何らかの操作をしたいときは
df["特定のカラム"].XXXXX()
を使う

１３０９人に対して２人の欠損はかなり少ないといえる
なのでこの２人分の欠損は最も乗客の多い港で補完する

乗客の多い港を確認
グラフで確認
plt.figure(figsize=(6, 4))
sns.countplot(data=df2, x="Embarked")
plt.show　　　#実行

#グラフからほとんどの乗客がSという港から乗客している
２人分の欠損値をSで補完する

欠損値の補完
データフレームに対してfillna("補完したい値")

データを補完する前に元のデータのコピーを取っておきたい　#安全に分析を進めるため

df3 = df2.copy()  #df2のコピーを取っておいてdf3に入れておく
df3["Embarked"] = df3["Embarked"].fillna("S")　　#データの補完

補完できたか確認
print("欠損値の数;", df3["Embarked"].isnull().sum())　　#実行

欠損値の数; 0

同様にして年齢も補完していく
欠損値の確認
df3["カウントしたいカラム"].isnull().sum()を使う　　#復習

print("欠損値の数:", df3["Age"].isnull().sum())  #実行

欠損値の数: 263
263人の乗客の年齢のデータが欠損していることが分かる
全体が1309人であることを考えると20％を超える割と多めのデータであることが分かる

データの補完
まずはグラフで確認
分布を知りたいのでヒストグラムを使う
まずは乗客の年齢の最大値と最小値を確かめる

print("最小値：", df3["Age"].min())
print("最大値：", df3["Age"].max())　　#実行

最小値： 0.17
最大値： 80.0

下は0歳児上は80歳までいることが分かる
各年代のボリュームを知る為に8分割して確認する
sns.histplot(df3[可視化したいデータ"], kde=False, bins=分割する数)

plt.figure(figsize=(6, 4))  #グラフのサイズの指定
sns.histplot(df3["Age"], kde=False, bins=8)
plt.show()　　　　　　　　　　　　　　　　　　　　#実行

#グラフが描画される

グラフから最も多いのは20～30代であることが分かる
次いで30～40代、次に10～20代になっている
10～20代が意外に多いことから家族連れも多かったのではと仮説が立てられる
そうなると同乗している兄弟や配偶者の数を見て活用することでより精度を向上出来る新しい特徴量を作成できそう
本来はこのように新しい特徴量を作っていくことが多い

年齢の欠損値の補完を行う
データから平均よりも中央値を使った方がよさそう#平均年齢にするとデータから上の方に引っ張られそうなので
平均値と中央値を確かめる

print("平均値：", df3["Age"].mean())
print("中央値：", df3["Age"].median())　　　#実行

平均値： 29.881137667304014
中央値： 28.0

やはり平均値の方が高いが現実的に考えて欠損しているデータの客がみな28歳とは考えにくい
今回は練習のため28歳で補完してしまう

まずはデータのコピー
df4 = df3.copy()        #コピーしてdf4に入れる
age_median = df4["Age"].median()　　#中央値を計算して結果を代入
print(age_median)　　　　　　　　　　#念のため出力して確認

28.0

df4["Age"] = df4["Age"].fillna(age_median) #欠損値を補完して代入しておく

補完できた確認
print("欠損値の数", df4["Age"].isnull().sum())  #復習

欠損値の数 0　　　　#しっかりと補完できている

これで今回使いたいデータの補完はすべて完了した
本来は欠損値の取り扱いはもっと慎重に行うべき、本来欠損値を補完するときはしっかり仮説を立ててただしいアプローチできているか検討しなくてはならない

・カテゴリ変数の数値変換
カテゴリ変数とは数値で表せる変数ではなく、男性・女性のようにラベルで表されるデータ
機械学習モデルを作成するときカテゴリー変数を使うことができないから
1⃣ワンホットエンコーディング
各カテゴリーに対応するカラムを準備して
該当する場合１　該当しない場合0としてラベル付けする
例えば乗船した港が次の場合はこうなる

乗船した港　　S　Q　C
S　　　　　　 1　0　0
Q　　　　　　 0　0　1
S　　　　　　 1　0　0
C　　　　　　 0　1　0


このようにカラムを増やして数値変換する


















